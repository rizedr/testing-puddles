// This file is auto-generated by @hey-api/openapi-ts

export enum Action {
    ALL_IN = 0,
    RAISE = 1,
    CALL = 2,
    CHECK = 3,
    FOLD = 4,
    AWAY = 5,
    CHECK_OR_FOLD = 6,
    POST_BLINDS = 7,
    WAIT_FOR_BLINDS = 8,
    SET_HOST = 9,
    ACCEPT_PLAYER = 10,
    REJECT_PLAYER = 11,
    CANCEL_JOIN = 12,
    START_GAME = 13,
    ACTIVATE_EXTRA_TIME = 14,
    CANCEL_RETURN_TO_GAME = 15,
    KICK_PLAYER = 16,
    JOIN_GAME = 17,
    TOP_UP = 18,
    CASH_OUT = 19,
    STRADDLE = 20,
    SHOW_CARD = 21,
    REGISTER_REFERRAL = 22,
    REGISTER_AFFILIATE = 23,
    AWAY_NEXT_HAND = 24,
    VOTE_DEAL_CHOICE = 25,
    BOMB_POT = 26,
    UPDATE_SETTINGS = 27,
    ANTE = 28
}

export type AffiliateReferral = {
    referral_id: string;
    affiliate_id: string;
    player_id: string;
    affiliate_rate?: number;
};

export type DealChoiceInput = {
    vote: number;
};

export type Deposit = {
    transaction_hash: string;
    address: string;
    amount: number;
    chain_id: string;
    status: DepositStatus;
};

export enum DepositStatus {
    PENDING = 0,
    CONFIRMED = 1,
    FLUSHED = 2
}

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type PlayerActionInput = {
    action: Action;
    amount?: number | null;
    is_min_raise?: boolean;
    action_target?: string | null;
    seat_number?: number | null;
    card_index?: number | null;
    affiliate_referral?: AffiliateReferral | null;
    update_settings?: UpdateSettings | null;
};

export type PlayerActionResponse = {
    amount: number;
};

export type ShareGameImageRequest = {
    username: string;
    date: string;
    blinds: string;
    buy_in: string;
    cash_out: string;
    pnl: string;
};

export type UpdateSettings = {
    bomb_pot_bb?: number | null;
    bomb_pot_frequency?: number | null;
    ante_value?: number | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type WithdrawalQuote = {
    deposit_address: string;
    request_id: string;
};

export type WithdrawalRequest = {
    address: string;
    amount: string;
    chain_id: string;
};

export enum GameState {
    CREATE = 0,
    PRE_FLOP = 1,
    FLOP = 2,
    TURN = 3,
    RIVER = 4,
    WINNERS = 5,
    RESET_HAND = 6,
    RUN_IT_TWICE_FLOP = 7,
    RUN_IT_TWICE_TURN = 8,
    RUN_IT_TWICE_RIVER = 9,
    DEAL_CHOICE = 10,
    ANTE = 11
}

export enum CardState {
    NORMAL = 0,
    HIGHLIGHTED = 1,
    DIMMED = 2
}

export enum LogType {
    HOST_CHANGED = 0,
    TURN_START = 1,
    TIMEOUT = 2,
    CHECK = 3,
    FOLD = 4,
    CALL = 5,
    RAISE = 6,
    ALL_IN = 7,
    LEAVE = 8,
    WIN = 9,
    GAME_CREATED = 10,
    FLOP = 11,
    TURN = 12,
    RIVER = 13,
    BUY_IN = 14,
    TOP_UP = 15,
    POST_SB = 16,
    POST_BB = 17,
    HAND_START = 18,
    HAND_END = 19,
    RENAME = 20,
    UNCALLED_BET = 21,
    SHOW_CARD = 22,
    SHOW_CARDS = 23,
    STRADDLE = 24,
    FLOP_RUN_IT_TWICE = 25,
    TURN_RUN_IT_TWICE = 26,
    RIVER_RUN_IT_TWICE = 27,
    BOARD_WIN = 28,
    BET = 29,
    PLAYERS = 30,
    BOMB_POT = 31,
    POST_BOMB_POT = 32,
    POST_ANTE = 33
}

export enum HandName {
    NONE = 0,
    LAST_PLAYER_STANDING = 1,
    HIGH_CARD = 2,
    PAIR = 3,
    TWO_PAIR = 4,
    THREE_OF_A_KIND = 5,
    STRAIGHT = 6,
    FLUSH = 7,
    FULL_HOUSE = 8,
    FOUR_OF_A_KIND = 9,
    STRAIGHT_FLUSH = 10,
    ROYAL_FLUSH = 11
}

export enum AddMode {
    POST_BLINDS = 0,
    WAIT_FOR_BLINDS = 1
}

export enum GameMode {
    NLH = 0,
    PLO = 1
}

export enum PokerGameState {
    CREATE = 0,
    PRE_FLOP = 1,
    FLOP = 2,
    TURN = 3,
    RIVER = 4,
    SHOWDOWN = 5,
    RESET_HAND = 6,
    RUN_IT_TWICE_FLOP = 7,
    RUN_IT_TWICE_TURN = 8,
    RUN_IT_TWICE_RIVER = 9,
    DEAL_CHOICE = 10,
    ANTE = 11
}

export enum GameVisibility {
    PUBLIC = 0,
    PRIVATE = 1
}

export type HealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type HealthResponse = HealthResponses[keyof HealthResponses];

export type PlayerActionData = {
    body: PlayerActionInput;
    path: {
        game_id: string;
    };
    query?: never;
    url: '/game/{game_id}/player_action';
};

export type PlayerActionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PlayerActionError = PlayerActionErrors[keyof PlayerActionErrors];

export type PlayerActionResponses = {
    /**
     * Successful Response
     */
    200: PlayerActionResponse;
};

export type PlayerActionResponse2 = PlayerActionResponses[keyof PlayerActionResponses];

export type PanicData = {
    body?: never;
    path: {
        game_id: string;
    };
    query?: never;
    url: '/game/{game_id}/panic';
};

export type PanicErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PanicError = PanicErrors[keyof PanicErrors];

export type PanicResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ArchiveGameData = {
    body?: never;
    path: {
        game_id: string;
    };
    query?: never;
    url: '/game/{game_id}/archive';
};

export type ArchiveGameErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArchiveGameError = ArchiveGameErrors[keyof ArchiveGameErrors];

export type ArchiveGameResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VoteDealChoiceData = {
    body: DealChoiceInput;
    path: {
        game_id: string;
    };
    query?: never;
    url: '/game/{game_id}/vote_deal_choice';
};

export type VoteDealChoiceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VoteDealChoiceError = VoteDealChoiceErrors[keyof VoteDealChoiceErrors];

export type VoteDealChoiceResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenerateShareGameImageData = {
    body: ShareGameImageRequest;
    path: {
        game_id: string;
    };
    query?: never;
    url: '/game/{game_id}/download_image';
};

export type GenerateShareGameImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateShareGameImageError = GenerateShareGameImageErrors[keyof GenerateShareGameImageErrors];

export type GenerateShareGameImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDepositsData = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/analytics/deposits';
};

export type GetDepositsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDepositsError = GetDepositsErrors[keyof GetDepositsErrors];

export type GetDepositsResponses = {
    /**
     * Successful Response
     */
    200: Array<Deposit>;
};

export type GetDepositsResponse = GetDepositsResponses[keyof GetDepositsResponses];

export type GetWithdrawalQuoteData = {
    body: WithdrawalRequest;
    path?: never;
    query?: never;
    url: '/analytics/get_withdrawal_quote';
};

export type GetWithdrawalQuoteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWithdrawalQuoteError = GetWithdrawalQuoteErrors[keyof GetWithdrawalQuoteErrors];

export type GetWithdrawalQuoteResponses = {
    /**
     * Successful Response
     */
    200: WithdrawalQuote;
};

export type GetWithdrawalQuoteResponse = GetWithdrawalQuoteResponses[keyof GetWithdrawalQuoteResponses];